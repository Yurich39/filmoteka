// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./mocks_test.go -package=usecase_test
//
// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	entity "people-finder/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	slog "golang.org/x/exp/slog"
)

// MockPerson is a mock of Person interface.
type MockPerson struct {
	ctrl     *gomock.Controller
	recorder *MockPersonMockRecorder
}

// MockPersonMockRecorder is the mock recorder for MockPerson.
type MockPersonMockRecorder struct {
	mock *MockPerson
}

// NewMockPerson creates a new mock instance.
func NewMockPerson(ctrl *gomock.Controller) *MockPerson {
	mock := &MockPerson{ctrl: ctrl}
	mock.recorder = &MockPersonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerson) EXPECT() *MockPersonMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPerson) Delete(ctx context.Context, id int) (entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPersonMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPerson)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockPerson) Find(ctx context.Context, id int) (entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPersonMockRecorder) Find(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPerson)(nil).Find), ctx, id)
}

// List mocks base method.
func (m *MockPerson) List(ctx context.Context) ([]entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPersonMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPerson)(nil).List), ctx)
}

// Next mocks base method.
func (m *MockPerson) Next(ctx context.Context) ([]entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].([]entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockPersonMockRecorder) Next(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockPerson)(nil).Next), ctx)
}

// Save mocks base method.
func (m *MockPerson) Save(ctx context.Context, data entity.Data) (entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, data)
	ret0, _ := ret[0].(entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockPersonMockRecorder) Save(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPerson)(nil).Save), ctx, data)
}

// Update mocks base method.
func (m *MockPerson) Update(ctx context.Context, updates entity.Person) (entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, updates)
	ret0, _ := ret[0].(entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPersonMockRecorder) Update(ctx, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPerson)(nil).Update), ctx, updates)
}

// MockPersonRepo is a mock of PersonRepo interface.
type MockPersonRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRepoMockRecorder
}

// MockPersonRepoMockRecorder is the mock recorder for MockPersonRepo.
type MockPersonRepoMockRecorder struct {
	mock *MockPersonRepo
}

// NewMockPersonRepo creates a new mock instance.
func NewMockPersonRepo(ctrl *gomock.Controller) *MockPersonRepo {
	mock := &MockPersonRepo{ctrl: ctrl}
	mock.recorder = &MockPersonRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonRepo) EXPECT() *MockPersonRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPersonRepo) Delete(ctx context.Context, id int) (entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPersonRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPersonRepo)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockPersonRepo) Get(ctx context.Context, id int) (entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPersonRepoMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPersonRepo)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockPersonRepo) List(ctx context.Context) ([]entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPersonRepoMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPersonRepo)(nil).List), ctx)
}

// Next mocks base method.
func (m *MockPersonRepo) Next(ctx context.Context) ([]entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].([]entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockPersonRepoMockRecorder) Next(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockPersonRepo)(nil).Next), ctx)
}

// Save mocks base method.
func (m *MockPersonRepo) Save(ctx context.Context, data entity.Data) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockPersonRepoMockRecorder) Save(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPersonRepo)(nil).Save), ctx, data)
}

// Update mocks base method.
func (m *MockPersonRepo) Update(ctx context.Context, updates entity.Person) (entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, updates)
	ret0, _ := ret[0].(entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPersonRepoMockRecorder) Update(ctx, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPersonRepo)(nil).Update), ctx, updates)
}

// MockEnrichWebAPI is a mock of EnrichWebAPI interface.
type MockEnrichWebAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEnrichWebAPIMockRecorder
}

// MockEnrichWebAPIMockRecorder is the mock recorder for MockEnrichWebAPI.
type MockEnrichWebAPIMockRecorder struct {
	mock *MockEnrichWebAPI
}

// NewMockEnrichWebAPI creates a new mock instance.
func NewMockEnrichWebAPI(ctrl *gomock.Controller) *MockEnrichWebAPI {
	mock := &MockEnrichWebAPI{ctrl: ctrl}
	mock.recorder = &MockEnrichWebAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrichWebAPI) EXPECT() *MockEnrichWebAPIMockRecorder {
	return m.recorder
}

// EnrichAge mocks base method.
func (m *MockEnrichWebAPI) EnrichAge(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrichAge", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnrichAge indicates an expected call of EnrichAge.
func (mr *MockEnrichWebAPIMockRecorder) EnrichAge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichAge", reflect.TypeOf((*MockEnrichWebAPI)(nil).EnrichAge), name)
}

// EnrichGender mocks base method.
func (m *MockEnrichWebAPI) EnrichGender(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrichGender", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnrichGender indicates an expected call of EnrichGender.
func (mr *MockEnrichWebAPIMockRecorder) EnrichGender(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichGender", reflect.TypeOf((*MockEnrichWebAPI)(nil).EnrichGender), name)
}

// EnrichNationality mocks base method.
func (m *MockEnrichWebAPI) EnrichNationality(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrichNationality", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnrichNationality indicates an expected call of EnrichNationality.
func (mr *MockEnrichWebAPIMockRecorder) EnrichNationality(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichNationality", reflect.TypeOf((*MockEnrichWebAPI)(nil).EnrichNationality), name)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Err mocks base method.
func (m *MockLogger) Err(err error) slog.Attr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err", err)
	ret0, _ := ret[0].(slog.Attr)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockLoggerMockRecorder) Err(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockLogger)(nil).Err), err)
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}
